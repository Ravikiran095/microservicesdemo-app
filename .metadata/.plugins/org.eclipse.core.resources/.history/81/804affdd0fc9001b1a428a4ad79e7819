package com.appsdeveloperblog.photoapp.api.gateway;

import org.springframework.cloud.gateway.filter.GatewayFilter;
import org.springframework.cloud.gateway.filter.factory.AbstractGatewayFilterFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.server.reactive.ServerHttpRequest;
import org.springframework.http.server.reactive.ServerHttpResponse;
import org.springframework.stereotype.Component;
import org.springframework.web.server.ServerWebExchange;

import com.google.common.net.HttpHeaders;

import reactor.core.publisher.Mono;

@Component
public class AuthorizationHeaderFilter extends AbstractGatewayFilterFactory<AuthorizationHeaderFilter.config> {

           public static class config {
        	   
           }

		@Override
		public GatewayFilter apply(config config) {
			return (exchange, chain)-> {
		
				ServerHttpRequest request = exchange.getRequest(); 
		if(!request.getHeaders().containsKey(HttpHeaders.AUTHORIZATION)) {
			return onError(exchange, "No authorization header", HttpStatus.UNAUTHORIZED);
		}
			
		String  authorizationHeader = request.getHeaders().get("Authorization").get(0);
		String jwt = authorizationHeader.replace("Bearer", "");
		
		return chain.filter(exchange);
		};
}

		private Mono<Void> onError(ServerWebExchange exchange, String err, HttpStatus httpStatus) {
              
			ServerHttpResponse response = exchange.getResponse();
			response.setStatusCode(httpStatus);
			return response.setComplete();
		}
